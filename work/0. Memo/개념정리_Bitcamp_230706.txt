<<<< 개념정리 >>>>


* 모델링
시스템 개발 시 수행하는 모든 과정


* UML (통합 모델링 언어)
소프트웨어 집약 시스템 개발 시 명세화, 시각화, 문서화 한 것
시스템의 구조적 청사진을 시각화 하는 표준안을 제공한다.


* CLI 명령어
- md : make directory, 디렉토리 생성
- cd : change directory, 디렉토리 변경
- echo : 내가 쓰는 것을 따라함
- %path% : 경로를 보여줌


* CSV (comma seperated value)
구분자, ; , - \ spacebar 어떤 것이든 구분할 수 있음


* 플랫폼
프로그래밍에서 플랫폼(platform)은 프로그램이나 애플리케이션이 실행되는 하부 하드웨어 또는 소프트웨어 환경을 말합니다. 
플랫폼은 소프트웨어의 실행을 위해 필요한 인프라와 서비스를 제공합니다.


* IDE
통합 개발 환경(IDE, Integrated Development Environment)은 소프트웨어 개발을 위한 종합적인 도구와 기능을 제공하는 소프트웨어 애플리케이션입니다. 
코드 편집기, 컴파일러, 디버거, 빌드 자동화 도구 등이 하나의 사용자 인터페이스 안에 통합되어 있습니다. 


* URL
URL은 "Uniform Resource Locator"의 약자로, 인터넷에서 특정 리소스의 위치를 가리키는 주소입니다. 
URL은 웹 브라우저나 다른 애플리케이션에서 웹페이지, 이미지, 동영상 등의 리소스를 찾을 수 있도록 도와줍니다. 
URL은 다음과 같은 구성 요소로 이루어져 있습니다:

프로토콜(Protocol): URL이 사용하는 통신 프로토콜을 나타냅니다. 예를 들면, "http://"는 HTTP 프로토콜을 사용함을 나타냅니다.

호스트(Host): 리소스가 위치한 서버의 이름이나 IP 주소를 나타냅니다.

포트(Port): 서버에 접속할 때 사용하는 포트 번호를 나타냅니다. 기본적으로 사용되는 포트 번호는 생략될 수 있습니다.

경로(Path): 서버에서 리소스의 위치를 나타내는 디렉토리 경로를 나타냅니다. 예를 들면, "/images/photo.jpg"는 "images"라는 디렉토리 안에 있는 "photo.jpg" 파일을 가리킵니다.

쿼리 문자열(Query String): 추가적인 매개변수를 전달하기 위해 사용되며, URL 뒤에 "?"로 시작합니다. "key=value" 형태로 매개변수를 전달할 수 있습니다.

URL은 웹 브라우저의 주소창에 입력되거나, 웹페이지에서 링크를 클릭함으로써 접근할 수 있습니다. 예를 들어, "https://www.example.com/images/photo.jpg"라는 URL은 "www.example.com" 서버의 "images" 디렉토리 안에 있는 "photo.jpg" 파일을 가리킵니다.


* 확장자(extension)
컴퓨팅과 소프트웨어 관련에서 확장자(extension)란 파일 이름 뒤에 붙는 파일 유형 식별자를 말합니다. 
일반적으로 파일 이름과 구분하기 위해 점(.)으로 분리되어 사용되며, 파일의 형식이나 특성을 나타내는 역할을 합니다. 
확장자를 통해 운영 체제나 애플리케이션은 파일을 어떻게 처리하고 해석해야 하는지를 이해할 수 있습니다.

확장자는 파일이 어떤 방식으로 열리고 표시되며 다른 소프트웨어 프로그램에서 어떻게 처리되어야 하는지를 결정하는 데 중요한 역할을 합니다. 
특정 확장자를 가진 파일이 발견되면 운영 체제나 관련 애플리케이션은 해당 파일을 처리하는 데 사용될 프로그램을 결정하기 위해 이 정보를 활용합니다.


* argument (인수, 인자)
프로그래밍에서 "argument(인자 또는 전달인자)"란 함수나 메서드를 호출할 때 전달되는 값이나 표현식을 의미합니다. 
다른 말로 하면, 인자는 매개변수(parameter)에 실제로 전달되는 값입니다.

함수나 메서드 선언에서 매개변수는 인자를 받기 위한 자리 표시자로 정의됩니다. 
함수나 메서드가 호출될 때 이러한 매개변수에 인자가 전달되어, 함수나 메서드는 해당 값에 대해 작업을 수행할 수 있습니다.


* API
API는 "Application Programming Interface"의 약자로, 소프트웨어 애플리케이션끼리 상호작용하기 위한 규약이나 인터페이스를 제공하는 도구나 방법을 의미합니다.

API는 일종의 계약으로, 소프트웨어 개발자들이 제공되는 기능을 활용할 수 있도록 하는 인터페이스입니다. 
다른 개발자들이 작성한 코드나 서비스를 사용하고자 할 때, API를 통해 그들이 제공하는 기능에 접근하고 상호작용할 수 있습니다.


* Call by value & Call by reference

"Call by value"와 "Call by reference"는 프로그래밍 언어에서 함수 호출 시 인자를 전달하는 방식을 나타내는 개념입니다.

Call by value (값에 의한 호출):
Call by value는 함수 호출 시 인자로 전달되는 값의 복사본이 함수 매개변수에 전달됨을 의미합니다. 
함수 내에서 매개변수 값이 변경되어도 원본 값에는 영향을 주지 않습니다. 
함수는 전달된 값의 복사본에 대해 작업을 수행합니다.


예를 들면:

java
Copy code
public void increment(int num) {
    num = num + 1;
    System.out.println("함수 내부: " + num);
}

int value = 5;
increment(value);
System.out.println("함수 외부: " + value);

위의 예시에서 함수 내에서 num 매개변수 값이 증가되었지만, 함수 외부의 value 변수 값은 변경되지 않습니다. 
따라서 출력은 "함수 내부: 6"과 "함수 외부: 5"가 됩니다.


Call by reference (참조에 의한 호출):
Call by reference는 함수 호출 시 인자로 전달되는 변수의 참조(메모리 주소)가 함수 매개변수에 전달됨을 의미합니다. 
따라서 함수 내에서 매개변수 값을 변경하면 원본 변수의 값도 변경됩니다. 
함수는 원본 변수를 직접 참조하여 작업을 수행합니다.

예를 들면:

java
Copy code
public void increment(int[] arr) {
    arr[0] = arr[0] + 1;
    System.out.println("함수 내부: " + arr[0]);
}

int[] values = {5};
increment(values);
System.out.println("함수 외부: " + values[0]);


위의 예시에서 함수 내에서 arr 매개변수 값이 증가되었고, 이는 함수 외부의 values 배열에도 영향을 줍니다. 
따라서 출력은 "함수 내부: 6"과 "함수 외부: 6"이 됩니다.

Call by value와 Call by reference는 변수를 함수로 전달할 때 값의 복사본 또는 참조를 전달하는 방식을 나타냅니다. 
어떤 방식을 사용할지는 프로그래밍 언어에 따라 다르며, 이를 이해하고 활용하여 원하는 동작을 구현할 수 있습니다.



<<< OOP의 이해 >>>

1. OOP(Object Oriented Programming)

현실 세계 시스템을 가상 환경에서 객체라는 개념으로 표현하는 컴퓨터 프로그래밍의 종류 중 하나이다.


2. Object(객체)

고유의 속성, 상태, 기능을 가지는 물리적, 추상적인 모든 것이다.


3. Class

객체의 공통된 모든 속성, 기능, 행위 등을 추상화 하여 묶어둔 것이다.


4. abstraction(추상화)

사물들의 공통적 특징을 추출하여 하나의 개념으로 만드는 행위이다.
모델링 할 시스템에 종속적으로 추상화 작업이 진행 되는 특징이 있다.


5. Generalization(일반화) / Inheritance(상속)

하위의 객체가 가진 일반적인 특징을 상위 개념으로 부각시켜 하나의 으로 개념화, 계층화 하는 과정이다.


6. Specialization(구체적)

일반화된 특성을 가져와 각자 만이 갖고 있는 속성이나 행위를 추가, 수정하여 구체화 하는 것을 말한다.


7. Realization

개념적 무언가를 실체화(구현) 하는 것을 말한다.


8. Association

배우다 보면 알 것 같다.


9. Dependency

모르겠는데 의존적인 느낌, 어느 객체가 다른 객체에 종속적인 느낌일듯.


10. Polymorphism

상위의 일반적인 객체는 하위의 객체가 모두 보유한 특성이기에 하위 클래스를 인스턴스화 및 상위에 대입하여 사용 가능하다.


11. Encapsulation / 절차은닉 / 정보은닉

캡슐화란 어떠한 객체가 가진 특징 및 상황에 따라 객체의 정보를 전부, 일부 공개, 비공개 하는 행위이다.
현실 세계와 같이 감추고 싶은건 감출 수 있게 만드는 행위로 간주된다.

예.) 나의 개인 정보 라는 객체는 낯선 타인에게는 알려주지 않고, 가족이나 친구에게는 공개할 수 있다.



<<<< %classpath% 환경변수 >>>>

 . (현재 디렉토리) ; c:\work ;

현재 디렉토리 우선 참조해보고 이후 work 디렉토리 참조

<<<<<<< super 와 this >>>>>>>

- super() / this() : super() 는 상위 생성자를 호출, this() 는 현재 위치 에서 생성자 호출

- super. / this. : 추후 배울 듯
